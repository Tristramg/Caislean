admins = { }

use_libevent = true;

modules_enabled = {
	-- Generally required
		"roster"; -- Allow users to have a roster. Recommended ;)
		"saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
		"tls"; -- Add support for secure TLS on c2s/s2s connections
		"dialback"; -- s2s dialback support
		"disco"; -- Service discovery

	-- Not essential, but recommended
		"private"; -- Private XML storage (for room bookmarks, etc.)
		"vcard"; -- Allow users to set vCards
	
	-- These are commented by default as they have a performance impact
		--"privacy"; -- Support privacy lists
		"compression"; -- Stream compression (Debian: requires lua-zlib module to work)

	-- Nice to have
		--"version"; -- Replies to server version requests
		--"uptime"; -- Report how long server has been running
		--"time"; -- Let others know the time here on this server
		"ping"; -- Replies to XMPP pings with pongs
		"pep"; -- Enables users to publish their mood, activity, playing music and more
		"register"; -- Allow users to register on this server using a client and change passwords

	-- Admin interfaces
		"admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
		--"admin_telnet"; -- Opens telnet console interface on localhost port 5582
	
	-- HTTP modules
		--"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
		--"http_files"; -- Serve static files from a directory over HTTP

	-- Other specific functionality
		"posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
		--"groups"; -- Shared roster support
		--"announce"; -- Send announcement to all online users
		--"welcome"; -- Welcome users who register accounts
		--"watchregistrations"; -- Alert admins of registrations
		--"motd"; -- Send a message to users when they log in
		--"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
};

modules_disabled = {
	-- "offline"; -- Store offline messages
	-- "c2s"; -- Handle client connections
	-- "s2s"; -- Handle server-to-server connections
};

allow_registration = false;

daemonize = true;

pidfile = "/var/run/prosody/prosody.pid";

ssl = {
	certificate = "/etc/ssl/certs/{{ server_name }}.{{ domain_name }}.pem";
	key = "/etc/ssl/private/{{ server_name }}.{{ domain_name }}.key";
	dhparam = "/etc/ssl/dhparam.pem";
	ciphers = "kEECDH+aECDSA:kEECDH+aRSA:@STRENGTH:kEDH+aRSA:!MEDIUM:!LOW:!EXPORT:!RC4:!MD5:!aNULL:!eNULL:!3DES";
	options = { "no_sslv2", "no_sslv3", "no_ticket", "no_compression", "cipher_server_preference", "single_dh_use",	"single_ecdh_use" };
}

c2s_require_encryption = true

s2s_secure_auth = false

authentication = "cyrus"
cyrus_service_name = "xmpp"
cyrus_application_name = "prosody"

log = {
	info = "/var/log/prosody/prosody.log";
	error = "/var/log/prosody/prosody.err";
	{ levels = { "error" }; to = "syslog";  };
}

VirtualHost "{{ domain_name }}"
	enabled = true

	ssl = {
		certificate = "/etc/ssl/certs/{{ server_name }}.{{ domain_name }}.pem";
		key = "/etc/ssl/private/{{ server_name }}.{{ domain_name }}.key";
		dhparam = "/etc/ssl/dhparam.pem";
		ciphers = "kEECDH+aECDSA:kEECDH+aRSA:@STRENGTH:kEDH+aRSA:!MEDIUM:!LOW:!EXPORT:!RC4:!MD5:!aNULL:!eNULL:!3DES";
		options = { "no_sslv2", "no_sslv3", "no_ticket", "no_compression", "cipher_server_preference", "single_dh_use",	"single_ecdh_use" };
	}

---Set up a MUC (multi-user chat) room server
Component "conference.{{ domain_name }}" "muc"

-- Include "conf.d/*.cfg.lua"
